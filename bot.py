from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from threading import Thread
import socket
import os
import time
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7901391418:AAGVw38YRgxBTj-jvU9Ya3QS_9Q466Og1O4"
ADMIN_ID = 495544662
TARGET_CHAT_ID = "-1002645719218"

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è ping-—Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PING_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

pending_posts = {}

class BotPinger:
    def __init__(self, app):
        self.app = app
        self.is_running = True
        
    async def start_pinging(self):
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
                bot_info = await self.app.bot.get_me()
                logger.info(f"Bot ping successful: @{bot_info.username} is alive")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –≤ –ª–æ–≥-—á–∞—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —á–∞—Ç)
                await self.app.bot.send_message(
                    chat_id=ADMIN_ID,
                    text="ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    disable_notification=True
                )
            except Exception as e:
                logger.error(f"Ping failed: {e}")
            
            await asyncio.sleep(PING_INTERVAL)

    def stop_pinging(self):
        self.is_running = False

# –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
def run_dummy_server():
    while True:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(('0.0.0.0', int(os.environ.get('PORT', 10000))))
                s.listen()
                s.settimeout(5)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ is_running
                
                while True:
                    try:
                        conn, addr = s.accept()
                        conn.sendall(b"HTTP/1.1 200 OK\n\nBot is running")
                        conn.close()
                    except socket.timeout:
                        continue
                    except Exception as e:
                        logger.error(f"Server error: {e}")
                        break
        except Exception as e:
            logger.error(f"Server crashed: {e}, restarting in 10 seconds...")
            time.sleep(10)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù—É –¥–∞–≤–∞–π –¥–∞–≤–∞–π –Ω–∞–ø–∞–¥–∞–π!\n\n"
        "–ö–∏–¥–∞–π —Å—é–¥–∞ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –º–µ–º—ã, –Ω–æ–≤–æ—Å—Ç–∏, –∫—Ä—É—Ç—ã–µ –Ω–∞—Ö–æ–¥–∫–∏!\n"
        "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –∞ –µ—Å–ª–∏ –≤—Å—ë –æ–∫ - –æ–ø—É–±–ª–∏–∫—É—é –¥–ª—è –≤—Å–µ—Ö!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="help")]
        ])
    )

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - —è –ø–µ—Ä–µ–¥–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n\n"
             "–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä—è—Ç - –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å —Ç–≤–æ–∏–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–Ω—è–ª, –Ω–∞—á–∏–Ω–∞—é!", callback_data="start_post")]
        ])
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        user = update.message.from_user
        chat_id = update.message.chat_id
        message_id = update.message.message_id

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{chat_id}_{message_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{chat_id}_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            admin_text = (
                f"–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç @{user.username or user.first_name}\n"
                f"ID: {user.id}\n\n"
            )
            
            if update.message.text:
                admin_text += f"–¢–µ–∫—Å—Ç:\n{update.message.text}"
            elif update.message.caption:
                admin_text += f"–ü–æ–¥–ø–∏—Å—å:\n{update.message.caption}"

            admin_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text,
                reply_markup=reply_markup
            )

            pending_posts[admin_msg.message_id] = {
                "original_chat_id": chat_id,
                "original_message_id": message_id,
                "content": update.message.text or update.message.caption or "",
                "user": {
                    "id": user.id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                },
                "photo": update.message.photo[-1].file_id if update.message.photo else None,
                "video": update.message.video.file_id if update.message.video else None,
                "document": update.message.document.file_id if update.message.document else None
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    admin_msg_id = query.message.message_id

    if data == "help":
        await help_callback(update, context)
        return
    elif data == "start_post":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—É —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        return

    if data.startswith("approve"):
        post_data = pending_posts.get(admin_msg_id)
        if post_data:
            try:
                author = post_data["user"]
                author_name = f"@{author['username']}" if author["username"] else author["first_name"]
                
                post_text = (
                    "–ù—É –¥–∞–≤–∞–π –¥–∞–≤–∞–π –Ω–∞–ø–∞–¥–∞–π!\n\n"
                    f"{post_data['content']}\n\n"
                    f"–ê–≤—Ç–æ—Ä: {author_name}\n"
                    "#–∫—Ä—É—Ç–æ #–∫–æ–Ω—Ç–µ–Ω—Ç"
                )

                if post_data["photo"]:
                    sent_msg = await context.bot.send_photo(
                        chat_id=TARGET_CHAT_ID,
                        photo=post_data["photo"],
                        caption=post_text
                    )
                elif post_data["video"]:
                    sent_msg = await context.bot.send_video(
                        chat_id=TARGET_CHAT_ID,
                        video=post_data["video"],
                        caption=post_text
                    )
                elif post_data["document"]:
                    sent_msg = await context.bot.send_document(
                        chat_id=TARGET_CHAT_ID,
                        document=post_data["document"],
                        caption=post_text
                    )
                else:
                    sent_msg = await context.bot.send_message(
                        chat_id=TARGET_CHAT_ID,
                        text=post_text
                    )

                await query.edit_message_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å –∫—Ä—É—Ç—ã–º –ø—Ä–∏–∑—ã–≤–æ–º!")
                
                await context.bot.send_message(
                    chat_id=post_data["original_chat_id"],
                    text="–¢–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∑–ª–µ—Ç–µ–ª –≤ –∫–∞–Ω–∞–ª! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç", url=f"https://t.me/c/{TARGET_CHAT_ID[4:]}/{sent_msg.message_id}")]
                    ])
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    elif data.startswith("reject"):
        post_data = pending_posts.get(admin_msg_id)
        if post_data:
            await context.bot.send_message(
                chat_id=post_data["original_chat_id"],
                text="–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!"
            )
        await query.edit_message_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    if admin_msg_id in pending_posts:
        del pending_posts[admin_msg_id]

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = Thread(target=run_dummy_server, daemon=True)
    server_thread.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    app = Application.builder().token(TOKEN).build()
    app.add_error_handler(on_error)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))
    
    # –°–∏—Å—Ç–µ–º–∞ ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    pinger = BotPinger(app)
    
    async def run_bot():
        # –ó–∞–ø—É—Å–∫–∞–µ–º ping-—Å–∏—Å—Ç–µ–º—É
        asyncio.create_task(pinger.start_pinging())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        while True:
            try:
                await app.initialize()
                await app.start()
                await app.updater.start_polling(
                    drop_pending_updates=True,
                    allowed_updates=Update.ALL_TYPES
                )
                
                logger.info("Bot started successfully")
                await asyncio.sleep(86400)  # –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ 1 –¥–µ–Ω—å
                
            except Exception as e:
                logger.error(f"Bot crashed: {e}, restarting in 10 seconds...")
                await asyncio.sleep(10)
            finally:
                try:
                    await app.updater.stop()
                    await app.stop()
                    await app.shutdown()
                except:
                    pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–µ—Ç–ª—é
    asyncio.run(run_bot())

if __name__ == "__main__":
    main()