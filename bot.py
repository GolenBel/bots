from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

TOKEN = "7901391418:AAGQvROcM7j1Oq1L3CtItn2ZwlDhxVL1wAI"
ADMIN_ID = 495544662
TARGET_CHAT_ID = "-1002645719218"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

pending_posts = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    start_text = (
        "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–µ–º—ã/–Ω–æ–≤–æ—Å—Ç–∏/–æ–±–æ–∏, —è –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
        "–ï—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å? –ö–∏–¥–∞–π —Å—é–¥–∞ üëá"
    )
    await update.message.reply_text(start_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        user = update.message.from_user
        chat_id = update.message.chat_id
        message_id = update.message.message_id

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{chat_id}_{message_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{chat_id}_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=chat_id,
                message_id=message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            admin_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ—Ç @{user.username or user.first_name}:",
                reply_markup=reply_markup
            )

            pending_posts[admin_msg.message_id] = {
                "original_chat_id": chat_id,
                "original_message_id": message_id,
                "original_content": update.message.text or update.message.caption or "",
                "user": user
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é...")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    admin_msg_id = query.message.message_id

    if data.startswith("approve"):
        post_data = pending_posts.get(admin_msg_id)
        if post_data:
            user = post_data["user"]
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ

                    f"–ê–≤—Ç–æ—Ä: @{user.username or user.first_name}"
    

                # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç)
                if update.message.photo:
                    await context.bot.send_photo(
                        chat_id=TARGET_CHAT_ID,
                        photo=update.message.photo[-1].file_id,
                        caption=publication_text
                    )
                elif update.message.video:
                    await context.bot.send_video(
                        chat_id=TARGET_CHAT_ID,
                        video=update.message.video.file_id,
                        caption=publication_text
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await context.bot.send_message(
                        chat_id=TARGET_CHAT_ID,
                        text=publication_text
                    )

                await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
                await context.bot.send_message(
                    chat_id=post_data["original_chat_id"],
                    text="üéâ –¢–≤–æ–π –ø–æ—Å—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç!"
                )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")
    elif data.startswith("reject"):
        post_data = pending_posts.get(admin_msg_id)
        if post_data:
            await context.bot.send_message(
                chat_id=post_data["original_chat_id"],
                text="üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é."
            )
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

    if admin_msg_id in pending_posts:
        del pending_posts[admin_msg_id]

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    try:
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False,
            drop_pending_updates=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()