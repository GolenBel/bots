from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from threading import Thread
import socket
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv('TELEGRAM_TOKEN', "7901391418:AAGQvROcM7j1Oq1L3CtItn2ZwlDhxVL1wAI")
ADMIN_ID = int(os.getenv('ADMIN_ID', 495544662))
TARGET_CHAT_ID = os.getenv('TARGET_CHAT_ID', "-1002645719218")

class BotServer:
    @staticmethod
    def run():
        """HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render —Å —á–∏—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            s.bind(('0.0.0.0', int(os.getenv('PORT', 10000))))
            s.listen()
            while True:
                conn, _ = s.accept()
                response = (
                    "HTTP/1.1 200 OK\n"
                    "Content-Type: text/plain\n\n"
                    f"Content Moderation Bot\n"
                    f"Status: Online\n"
                    f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                conn.sendall(response.encode('utf-8'))
                conn.close()

class ContentModerator:
    def __init__(self):
        self.pending_posts = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —á–∏—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        welcome_msg = """
        <b>üöÄ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>

        –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–µ–º—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏!
        –Ø –ø–µ—Ä–µ–¥–∞–º –∏—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(welcome_msg, parse_mode='HTML')

    async def handle_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if update.message.chat.type != "private":
            return

        user = update.message.from_user
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            forwarded = await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{update.message.chat_id}_{update.message.message_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.chat_id}_{update.message.message_id}")]
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            self.pending_posts[forwarded.message_id] = {
                "original_chat_id": update.message.chat_id,
                "original_message_id": update.message.message_id,
                "content": update.message.text or update.message.caption or "",
                "user": user.to_dict(),
                "media": {
                    "photo": update.message.photo[-1].file_id if update.message.photo else None,
                    "video": update.message.video.file_id if update.message.video else None,
                    "document": update.message.document.file_id if update.message.document else None
                }
            }

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì® –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç @{user.username or user.first_name}:",
                reply_to_message_id=forwarded.message_id,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            print(f"Moderation error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

    async def handle_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        data = query.data.split('_')
        action = data[0]
        post_id = query.message.message_id

        if post_id not in self.pending_posts:
            return await query.edit_message_text("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        post = self.pending_posts[post_id]
        author = post['user']
        author_name = f"@{author['username']}" if author['username'] else author['first_name']

        if action == "approve":
            try:
                content = f"{post['content']}\n\nüë§ –ê–≤—Ç–æ—Ä: {author_name}"
                
                if post['media']['photo']:
                    await context.bot.send_photo(
                        chat_id=TARGET_CHAT_ID,
                        photo=post['media']['photo'],
                        caption=content,
                        parse_mode='HTML'
                    )
                elif post['media']['video']:
                    await context.bot.send_video(
                        chat_id=TARGET_CHAT_ID,
                        video=post['media']['video'],
                        caption=content,
                        parse_mode='HTML'
                    )
                elif post['media']['document']:
                    await context.bot.send_document(
                        chat_id=TARGET_CHAT_ID,
                        document=post['media']['document'],
                        caption=content,
                        parse_mode='HTML'
                    )
                else:
                    await context.bot.send_message(
                        chat_id=TARGET_CHAT_ID,
                        text=content,
                        parse_mode='HTML'
                    )

                await context.bot.send_message(
                    chat_id=post['original_chat_id'],
                    text="‚úÖ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
                    parse_mode='HTML'
                )
                await query.edit_message_text("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                
            except Exception as e:
                print(f"Publish error: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

        elif action == "reject":
            await context.bot.send_message(
                chat_id=post['original_chat_id'],
                text="‚ùå –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                parse_mode='HTML'
            )
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")

        del self.pending_posts[post_id]

def main():
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    Thread(target=BotServer.run, daemon=True).start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    moderator = ContentModerator()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", moderator.start))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.ALL, moderator.handle_content))
    app.add_handler(CallbackQueryHandler(moderator.handle_decision))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    main()